---
description: This rule governs critical production deployment practices and must be followed for all deployments. It ensures reliable container startup, proper environment configuration, and prevents common deployment failures. The rule is particularly important for maintaining production stability, proper proxy configuration, and preventing deployment-breaking issues like stale domain configs or missing environment variables. This rule helps maintain deployment reliability by documenting known failure modes and their solutions. ðŸš€
globs:
alwaysApply: true
---
# Production Deployment Critical Learnings

## Critical Rules

- ALWAYS clean up stale domain configuration files in `proxy/conf.d/domains/*.conf` before starting fresh production deployments
- NEVER attempt production deployment with missing Cloudflare environment variables - verify `$CF_TOKEN`, `$CF_ACCOUNT`, and `$CF_ZONE` are set or deploy without Cloudflare first
- ALWAYS check for nginx-proxy container crash-loops with `podman logs nginx-proxy` if deployment scripts hang at "Waiting for proxy to be ready..."
- ALWAYS stop and remove crashed containers (`podman stop nginx-proxy && podman rm nginx-proxy`) before attempting fresh deployments
- NEVER leave proxy configurations referencing non-existent upstream containers - this causes infinite restart loops with `[emerg] host not found in upstream` errors
- ALWAYS use the Nix environment (`nix --extra-experimental-features "nix-command flakes" develop --command`) for production deployments while specifying `--env PRO` for target environment
- ALWAYS verify container status with `podman ps` and `podman logs` before troubleshooting deployment script hangs
- NEVER assume deployment scripts will complete if they hang for more than 2-3 minutes - investigate container logs immediately
- **DNS Resolution Fix**: If nginx shows "host not found in upstream" errors, replace container hostnames with IP addresses in proxy_pass directives (e.g., `proxy_pass http://10.89.1.2:80;` instead of `proxy_pass http://container-name:80;`)
- **Port Mapping**: Production proxy typically runs on ports 8080 (HTTP) and 8443 (HTTPS), not standard 80/443. Port forwarding must be configured manually on the host.
- ALWAYS test container connectivity from proxy container using `podman exec nginx-proxy ping container-ip` and `podman exec nginx-proxy curl -I http://container-ip:80` before troubleshooting proxy configuration
- **SCRIPT FIXED**: create-project-modular.sh now automatically detects container IP addresses and uses them in proxy_pass directives instead of hostnames to prevent DNS resolution failures

## CRITICAL BUG FIXES IMPLEMENTED (December 2024)

### 1. IP Address Detection Bug (FIXED)
- **Problem**: Script was concatenating ALL network IP addresses instead of getting specific proxy network IP
- **Symptom**: Malformed IPs like `10.89.6.2010.89.1.106` in proxy_pass directives
- **Root Cause**: `podman inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'` returns all IPs concatenated
- **Fix**: Use grep-based extraction: `podman inspect container | grep -A 10 "nginx-proxy-network" | grep IPAddress`

### 2. Network Name Template Parsing Bug (FIXED)
- **Problem**: Podman inspect template parsing fails with network names containing hyphens
- **Symptom**: `template: inspect:1: bad character U+002D '-'` errors with `nginx-proxy-network`
- **Root Cause**: Go template parser cannot handle network names with hyphens in template syntax
- **Fix**: Replaced template-based approach with grep-based IP extraction

### 3. Nginx Configuration Structure Bug (FIXED)
- **Problem**: Generated project nginx.conf missing `http` directive wrapper
- **Symptom**: `nginx: [emerg] "server" directive is not allowed here in /etc/nginx/nginx.conf:1`
- **Root Cause**: Configuration generated only server block without required http context
- **Fix**: Added proper nginx.conf structure with user, events, and http directives

### 4. SSL Certificate Security Vulnerability (FIXED)
- **Problem**: SSL certificates and private keys were being committed to git repository
- **Symptom**: Sensitive cryptographic material exposed in version control
- **Root Cause**: Missing .gitignore patterns for certificate files
- **Fix**: Added comprehensive .gitignore for *.pem, *.key, *.crt, certs/ directories

## Production Deployment Workflow

1. **Pre-deployment Cleanup**:
   ```bash
   # Clean stale domain configs
   rm -f proxy/conf.d/domains/*.conf
   
   # Stop and remove any crashed proxy containers
   podman stop nginx-proxy && podman rm nginx-proxy
   ```

2. **Environment Verification**:
   ```bash
   # Check Cloudflare variables (optional)
   echo "CF_TOKEN: ${CF_TOKEN:+SET}" 
   echo "CF_ACCOUNT: ${CF_ACCOUNT:+SET}"
   echo "CF_ZONE: ${CF_ZONE:+SET}"
   ```

3. **Production Deployment**:
   ```bash
   # Deploy without Cloudflare first (safer)
   nix --extra-experimental-features "nix-command flakes" develop --command \
   ./scripts/create-project-modular.sh --name project --domain domain.com --port 9000 --env PRO
   
   # Then add Cloudflare if needed
   ```

4. **Post-deployment Verification**:
   ```bash
   # Check containers are running
   podman ps | grep -E "(nginx-proxy|project-name)"
   
   # Check proxy logs for errors
   podman logs nginx-proxy --tail 20
   
   # Manually set up port forwarding for production if needed
   # sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080
   ```

## Common Failure Patterns

- **Script hangs**: Usually due to nginx-proxy crash-loop from stale domain configs
- **Container restart loops**: Check for `[emerg] host not found in upstream` in logs
- **Missing environment variables**: Deploy without Cloudflare first, add later
- **Port forwarding not configured**: Production requires manual host configuration to forward privileged ports 80/443 to container ports 8080/8443.

## Examples

<example>
  # Proper production deployment sequence
  rm -f proxy/conf.d/domains/*.conf
  podman stop nginx-proxy && podman rm nginx-proxy
  nix --extra-experimental-features "nix-command flakes" develop --command \
  ./scripts/create-project-modular.sh --name mapa-kms --domain mapakms.com --port 9000 --env PRO
  # Manually configure port forwarding on the host if needed
</example>

<example type="invalid">
  # Deploying with stale configs - causes infinite loops
  ./scripts/create-project-modular.sh --name new-project --env PRO
  # Hangs at "Waiting for proxy to be ready..." due to stale domain configs
</example>
