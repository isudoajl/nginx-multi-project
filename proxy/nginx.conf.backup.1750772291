user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;

    keepalive_timeout  65;

    # Compression
    gzip  on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_vary on;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;

    # Security settings
    limit_req_zone $binary_remote_addr zone=securitylimit:10m rate=10r/s;
    limit_conn_zone $binary_remote_addr zone=securityconn:10m;

    # Block common malicious bot user agents
    map $http_user_agent $bad_bot {
        default 0;
        ~*(nmap|nikto|sqlmap|arachni|dirbuster|gobuster|w3af|nessus|masscan|ZmEu|zgrab) 1;
        ~*(python-requests|python-urllib|python-httpx|go-http-client|curl|wget) 1;
        "" 1; # Empty user agent
    }

    # Block requests with unusual HTTP methods
    map $request_method $method_allowed {
        default 1;
        ~*(TRACE|TRACK|DEBUG) 0;
    }

    # Default server block for HTTP - redirect to HTTPS
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Return 444 for bad bots and unusual methods
        if ($bad_bot = 1) {
            return 444;
        }

        if ($method_allowed = 0) {
            return 444;
        }
        
        # Redirect to HTTPS
        return 301 https://$host$request_uri;
    }

    # Default server block for HTTPS - return 444 for unknown domains
    server {
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        server_name _;
        
        # Include SSL settings
        include /etc/nginx/conf.d/ssl-settings.conf;
        
        # Default SSL certificates (fallback)
        ssl_certificate /etc/nginx/certs/test-debug.local/cert.pem;
        ssl_certificate_key /etc/nginx/certs/test-debug.local/cert-key.pem;
        
        # Return 444 for bad bots and unusual methods
        if ($bad_bot = 1) {
            return 444;
        }

        if ($method_allowed = 0) {
            return 444;
        }
        
        # Return error code 444 (Nginx special code that closes the connection)
        # for unknown domains
        return 444;
    }

    # Include domain-specific configurations
    include /etc/nginx/conf.d/domains/*.conf;
} 